<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mealme.mapper.ProductMapper">


    <!-- 전체 상품 조회, 상품별 별점 조회, 총 상품 갯수 조회 -->
    <select id="selectAll" resultType="productVo">
        SELECT P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER, P.PRODUCT_PRICE,
               P.PRODUCT_EXPLANATION, P.PRODUCT_INVENTORY, P.PRODUCT_REGISTER_DATE,
               AVG(ORV.REVIEW_GRADE) AS AVERAGE_RATING, COUNT(*) AS TOTAL_COUNT,
               PF.FILE_NAME, PF.FILE_UPLOAD_PATH, PF.FILE_UUID
        FROM TBL_PRODUCT P
                 LEFT JOIN TBL_ORDER O ON P.PRODUCT_NUMBER = O.PRODUCT_NUMBER
                 LEFT JOIN TBL_ORDER_REVIEW ORV ON P.PRODUCT_NUMBER = ORV.PRODUCT_NUMBER
                 LEFT JOIN TBL_PRODUCT_FILE PF ON P.PRODUCT_NUMBER = PF.PRODUCT_NUMBER
        GROUP BY P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER,
                 P.PRODUCT_PRICE, P.PRODUCT_EXPLANATION, P.PRODUCT_INVENTORY, P.PRODUCT_REGISTER_DATE,
                 PF.FILE_NAME, PF.FILE_UPLOAD_PATH, PF.FILE_UUID
    </select>



    <!-- 상품 전체 조회-->
    <select id="selectAllPrice" resultType="productVo">
        SELECT P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER, P.PRODUCT_PRICE, P.PRODUCT_EXPLANATION, AVG(ORV.REVIEW_GRADE) AS AVERAGE_RATING, COUNT(*) AS TOTAL_COUNT
        FROM TBL_PRODUCT P
                 LEFT JOIN TBL_ORDER_REVIEW ORV ON P.PRODUCT_NUMBER = ORV.PRODUCT_NUMBER
        GROUP BY P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER, P.PRODUCT_PRICE, P.PRODUCT_EXPLANATION
    </select>


<!--    상품 낮은 가격순으로 정렬 후 조회-->
    <select id="selectLowPrice" resultType="productVo">
        SELECT P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER, P.PRODUCT_PRICE, P.PRODUCT_EXPLANATION, AVG(ORV.REVIEW_GRADE) AS AVERAGE_RATING, COUNT(*) AS TOTAL_COUNT
        FROM TBL_PRODUCT P
                 LEFT JOIN TBL_ORDER_REVIEW ORV ON P.PRODUCT_NUMBER = ORV.PRODUCT_NUMBER
        GROUP BY P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER, P.PRODUCT_PRICE, P.PRODUCT_EXPLANATION
        ORDER BY P.PRODUCT_PRICE ASC
    </select>

    <!--    상품 리뷰 높은 순으로 정렬 후 조회-->
    <select id="selectReviewPrice" resultType="productVo">
        SELECT P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER, P.PRODUCT_PRICE, P.PRODUCT_EXPLANATION, P.PRODUCT_REGISTER_DATE, AVG(COALESCE(ORV.REVIEW_GRADE, 0)) AS AVERAGE_RATING, COUNT(*) AS TOTAL_COUNT
        FROM TBL_PRODUCT P
                 LEFT JOIN TBL_ORDER_REVIEW ORV
                           ON P.PRODUCT_NUMBER = ORV.PRODUCT_NUMBER
        GROUP BY P.PRODUCT_NUMBER, P.CATEGORY_CODE1, P.CATEGORY_CODE2, P.PRODUCT_NAME, P.PRODUCT_SELLER, P.PRODUCT_PRICE, P.PRODUCT_EXPLANATION, P.PRODUCT_REGISTER_DATE
        ORDER BY AVERAGE_RATING DESC
    </select>

    <!--    상품 상세정보 상품 조회-->
    <select id="selectOne" resultType="productVo">
        SELECT
            p.PRODUCT_NUMBER,
            p.PRODUCT_NAME,
            p.PRODUCT_SELLER,
            p.PRODUCT_PRICE,
            p.PRODUCT_EXPLANATION,
            p.PRODUCT_REGISTER_DATE,
            p.PRODUCT_INVENTORY,
            c.CATEGORY_NAME,
            r.REVIEW_NUMBER,
            r.REVIEW_DATE,
            r.REVIEW_CONTENT,
            r.REVIEW_GRADE,
            f.FILE_NUMBER,
            f.FILE_NAME,
            f.FILE_UPLOAD_PATH,
            f.FILE_UUID,
            u.USER_NUMBER,
            u.USER_NAME,
            u.USER_ID
        FROM
            TBL_PRODUCT p
                JOIN TBL_PRODUCT_CATEGORY c ON p.CATEGORY_CODE1 = c.CATEGORY_CODE1
                LEFT JOIN TBL_ORDER_REVIEW r ON p.PRODUCT_NUMBER = r.PRODUCT_NUMBER
                LEFT JOIN TBL_PRODUCT_FILE f ON p.PRODUCT_NUMBER = f.PRODUCT_NUMBER
                LEFT JOIN TBL_USER u ON p.PRODUCT_SELLER = u.USER_ID
        WHERE
            p.PRODUCT_NUMBER = #{productNumber}
    </select>

    <!--    장바구니 상품 조회-->
    <select id="selectCart" resultType="cartVo">
        SELECT DISTINCT
            u.USER_NUMBER,
            u.USER_NAME,
            p.PRODUCT_NAME,
            p.PRODUCT_PRICE,
            c.CART_COUNT,
            p.PRODUCT_PRICE * c.CART_COUNT AS TOTAL_COUNT,
            pf.FILE_NAME,
            pf.FILE_UPLOAD_PATH,
            pf.FILE_UUID
        FROM
            TBL_USER u
                JOIN TBL_CART c ON u.USER_NUMBER = c.USER_NUMBER
                JOIN TBL_PRODUCT p ON p.PRODUCT_NUMBER = c.PRODUCT_NUMBER
                LEFT JOIN TBL_PRODUCT_FILE pf ON pf.FILE_NUMBER = p.PRODUCT_NUMBER
        WHERE
            u.USER_NUMBER = #{userNumber}
    </select>


    <insert id="addCart">
        INSERT INTO TBL_CART (CART_NUMBER, PRODUCT_NUMBER, USER_NUMBER, CART_COUNT)
        VALUES (SEQ_CART.nextval, #{productNumber}, #{userNumber}, #{cartCount})
    </insert>

    <select id="selectAllCart" resultType="cartVo">
        SELECT CART_NUMBER, PRODUCT_NUMBER, USER_NUMBER, CART_COUNT
        FROM TBL_CART
        WHERE CART_NUMBER = #{cartNumber}
    </select>

    <update id="updateCart">
        UPDATE TBL_CART
        SET CART_COUNT =#{cartCount}, PRODUCT_NUMBER =#{productNumber}, USER_NUMBER =#{userNumber}
        WHERE CART_NUMBER = #{cartNumber}
    </update>

    <delete id="deleteCart">
        DELETE FROM TBL_CART
        WHERE CART_NUMBER = #{cartNumber}
    </delete>






</mapper>